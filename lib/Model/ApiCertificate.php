<?php
/**
 * ApiCertificate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Model;

use \ArrayAccess;
use \Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * ApiCertificate Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiCertificate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApiCertificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expiresOn' => 'int',
        'fingerprint' => 'string',
        'id' => 'string',
        'issuedOn' => 'int',
        'issuerCommonName' => 'string',
        'issuerOrganization' => 'string',
        'issuerOrganizationalUnit' => 'string',
        'pem' => 'string',
        'serialNumber' => 'string',
        'subjectCommonName' => 'string',
        'subjectOrganization' => 'string',
        'subjectOrganizationalUnit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expiresOn' => 'int64',
        'fingerprint' => null,
        'id' => null,
        'issuedOn' => 'int64',
        'issuerCommonName' => null,
        'issuerOrganization' => null,
        'issuerOrganizationalUnit' => null,
        'pem' => null,
        'serialNumber' => null,
        'subjectCommonName' => null,
        'subjectOrganization' => null,
        'subjectOrganizationalUnit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expiresOn' => 'expiresOn',
        'fingerprint' => 'fingerprint',
        'id' => 'id',
        'issuedOn' => 'issuedOn',
        'issuerCommonName' => 'issuerCommonName',
        'issuerOrganization' => 'issuerOrganization',
        'issuerOrganizationalUnit' => 'issuerOrganizationalUnit',
        'pem' => 'pem',
        'serialNumber' => 'serialNumber',
        'subjectCommonName' => 'subjectCommonName',
        'subjectOrganization' => 'subjectOrganization',
        'subjectOrganizationalUnit' => 'subjectOrganizationalUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expiresOn' => 'setExpiresOn',
        'fingerprint' => 'setFingerprint',
        'id' => 'setId',
        'issuedOn' => 'setIssuedOn',
        'issuerCommonName' => 'setIssuerCommonName',
        'issuerOrganization' => 'setIssuerOrganization',
        'issuerOrganizationalUnit' => 'setIssuerOrganizationalUnit',
        'pem' => 'setPem',
        'serialNumber' => 'setSerialNumber',
        'subjectCommonName' => 'setSubjectCommonName',
        'subjectOrganization' => 'setSubjectOrganization',
        'subjectOrganizationalUnit' => 'setSubjectOrganizationalUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expiresOn' => 'getExpiresOn',
        'fingerprint' => 'getFingerprint',
        'id' => 'getId',
        'issuedOn' => 'getIssuedOn',
        'issuerCommonName' => 'getIssuerCommonName',
        'issuerOrganization' => 'getIssuerOrganization',
        'issuerOrganizationalUnit' => 'getIssuerOrganizationalUnit',
        'pem' => 'getPem',
        'serialNumber' => 'getSerialNumber',
        'subjectCommonName' => 'getSubjectCommonName',
        'subjectOrganization' => 'getSubjectOrganization',
        'subjectOrganizationalUnit' => 'getSubjectOrganizationalUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expiresOn'] = isset($data['expiresOn']) ? $data['expiresOn'] : null;
        $this->container['fingerprint'] = isset($data['fingerprint']) ? $data['fingerprint'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['issuedOn'] = isset($data['issuedOn']) ? $data['issuedOn'] : null;
        $this->container['issuerCommonName'] = isset($data['issuerCommonName']) ? $data['issuerCommonName'] : null;
        $this->container['issuerOrganization'] = isset($data['issuerOrganization']) ? $data['issuerOrganization'] : null;
        $this->container['issuerOrganizationalUnit'] = isset($data['issuerOrganizationalUnit']) ? $data['issuerOrganizationalUnit'] : null;
        $this->container['pem'] = isset($data['pem']) ? $data['pem'] : null;
        $this->container['serialNumber'] = isset($data['serialNumber']) ? $data['serialNumber'] : null;
        $this->container['subjectCommonName'] = isset($data['subjectCommonName']) ? $data['subjectCommonName'] : null;
        $this->container['subjectOrganization'] = isset($data['subjectOrganization']) ? $data['subjectOrganization'] : null;
        $this->container['subjectOrganizationalUnit'] = isset($data['subjectOrganizationalUnit']) ? $data['subjectOrganizationalUnit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expiresOn
     *
     * @return int
     */
    public function getExpiresOn()
    {
        return $this->container['expiresOn'];
    }

    /**
     * Sets expiresOn
     *
     * @param int $expiresOn expiresOn
     *
     * @return $this
     */
    public function setExpiresOn($expiresOn)
    {
        $this->container['expiresOn'] = $expiresOn;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string $fingerprint fingerprint
     *
     * @return $this
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issuedOn
     *
     * @return int
     */
    public function getIssuedOn()
    {
        return $this->container['issuedOn'];
    }

    /**
     * Sets issuedOn
     *
     * @param int $issuedOn issuedOn
     *
     * @return $this
     */
    public function setIssuedOn($issuedOn)
    {
        $this->container['issuedOn'] = $issuedOn;

        return $this;
    }

    /**
     * Gets issuerCommonName
     *
     * @return string
     */
    public function getIssuerCommonName()
    {
        return $this->container['issuerCommonName'];
    }

    /**
     * Sets issuerCommonName
     *
     * @param string $issuerCommonName issuerCommonName
     *
     * @return $this
     */
    public function setIssuerCommonName($issuerCommonName)
    {
        $this->container['issuerCommonName'] = $issuerCommonName;

        return $this;
    }

    /**
     * Gets issuerOrganization
     *
     * @return string
     */
    public function getIssuerOrganization()
    {
        return $this->container['issuerOrganization'];
    }

    /**
     * Sets issuerOrganization
     *
     * @param string $issuerOrganization issuerOrganization
     *
     * @return $this
     */
    public function setIssuerOrganization($issuerOrganization)
    {
        $this->container['issuerOrganization'] = $issuerOrganization;

        return $this;
    }

    /**
     * Gets issuerOrganizationalUnit
     *
     * @return string
     */
    public function getIssuerOrganizationalUnit()
    {
        return $this->container['issuerOrganizationalUnit'];
    }

    /**
     * Sets issuerOrganizationalUnit
     *
     * @param string $issuerOrganizationalUnit issuerOrganizationalUnit
     *
     * @return $this
     */
    public function setIssuerOrganizationalUnit($issuerOrganizationalUnit)
    {
        $this->container['issuerOrganizationalUnit'] = $issuerOrganizationalUnit;

        return $this;
    }

    /**
     * Gets pem
     *
     * @return string
     */
    public function getPem()
    {
        return $this->container['pem'];
    }

    /**
     * Sets pem
     *
     * @param string $pem pem
     *
     * @return $this
     */
    public function setPem($pem)
    {
        $this->container['pem'] = $pem;

        return $this;
    }

    /**
     * Gets serialNumber
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serialNumber'];
    }

    /**
     * Sets serialNumber
     *
     * @param string $serialNumber serialNumber
     *
     * @return $this
     */
    public function setSerialNumber($serialNumber)
    {
        $this->container['serialNumber'] = $serialNumber;

        return $this;
    }

    /**
     * Gets subjectCommonName
     *
     * @return string
     */
    public function getSubjectCommonName()
    {
        return $this->container['subjectCommonName'];
    }

    /**
     * Sets subjectCommonName
     *
     * @param string $subjectCommonName subjectCommonName
     *
     * @return $this
     */
    public function setSubjectCommonName($subjectCommonName)
    {
        $this->container['subjectCommonName'] = $subjectCommonName;

        return $this;
    }

    /**
     * Gets subjectOrganization
     *
     * @return string
     */
    public function getSubjectOrganization()
    {
        return $this->container['subjectOrganization'];
    }

    /**
     * Sets subjectOrganization
     *
     * @param string $subjectOrganization subjectOrganization
     *
     * @return $this
     */
    public function setSubjectOrganization($subjectOrganization)
    {
        $this->container['subjectOrganization'] = $subjectOrganization;

        return $this;
    }

    /**
     * Gets subjectOrganizationalUnit
     *
     * @return string
     */
    public function getSubjectOrganizationalUnit()
    {
        return $this->container['subjectOrganizationalUnit'];
    }

    /**
     * Sets subjectOrganizationalUnit
     *
     * @param string $subjectOrganizationalUnit subjectOrganizationalUnit
     *
     * @return $this
     */
    public function setSubjectOrganizationalUnit($subjectOrganizationalUnit)
    {
        $this->container['subjectOrganizationalUnit'] = $subjectOrganizationalUnit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


