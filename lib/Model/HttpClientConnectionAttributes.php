<?php
/**
 * HttpClientConnectionAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Model;

use \ArrayAccess;
use \Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * HttpClientConnectionAttributes Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HttpClientConnectionAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HttpClientConnectionAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'retries' => 'int',
        'userAgentSuffix' => 'string',
        'timeout' => 'int',
        'enableCircularRedirects' => 'bool',
        'enableCookies' => 'bool',
        'useTrustStore' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'retries' => 'int32',
        'userAgentSuffix' => null,
        'timeout' => 'int32',
        'enableCircularRedirects' => null,
        'enableCookies' => null,
        'useTrustStore' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retries' => 'retries',
        'userAgentSuffix' => 'userAgentSuffix',
        'timeout' => 'timeout',
        'enableCircularRedirects' => 'enableCircularRedirects',
        'enableCookies' => 'enableCookies',
        'useTrustStore' => 'useTrustStore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retries' => 'setRetries',
        'userAgentSuffix' => 'setUserAgentSuffix',
        'timeout' => 'setTimeout',
        'enableCircularRedirects' => 'setEnableCircularRedirects',
        'enableCookies' => 'setEnableCookies',
        'useTrustStore' => 'setUseTrustStore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retries' => 'getRetries',
        'userAgentSuffix' => 'getUserAgentSuffix',
        'timeout' => 'getTimeout',
        'enableCircularRedirects' => 'getEnableCircularRedirects',
        'enableCookies' => 'getEnableCookies',
        'useTrustStore' => 'getUseTrustStore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['retries'] = isset($data['retries']) ? $data['retries'] : null;
        $this->container['userAgentSuffix'] = isset($data['userAgentSuffix']) ? $data['userAgentSuffix'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
        $this->container['enableCircularRedirects'] = isset($data['enableCircularRedirects']) ? $data['enableCircularRedirects'] : null;
        $this->container['enableCookies'] = isset($data['enableCookies']) ? $data['enableCookies'] : null;
        $this->container['useTrustStore'] = isset($data['useTrustStore']) ? $data['useTrustStore'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['retries']) && ($this->container['retries'] > 10)) {
            $invalidProperties[] = "invalid value for 'retries', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['retries']) && ($this->container['retries'] < 0)) {
            $invalidProperties[] = "invalid value for 'retries', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] > 3600)) {
            $invalidProperties[] = "invalid value for 'timeout', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'timeout', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retries
     *
     * @return int
     */
    public function getRetries()
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     *
     * @param int $retries Total retries if the initial connection attempt suffers a timeout
     *
     * @return $this
     */
    public function setRetries($retries)
    {

        if (!is_null($retries) && ($retries > 10)) {
            throw new \InvalidArgumentException('invalid value for $retries when calling HttpClientConnectionAttributes., must be smaller than or equal to 10.');
        }
        if (!is_null($retries) && ($retries < 0)) {
            throw new \InvalidArgumentException('invalid value for $retries when calling HttpClientConnectionAttributes., must be bigger than or equal to 0.');
        }

        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets userAgentSuffix
     *
     * @return string
     */
    public function getUserAgentSuffix()
    {
        return $this->container['userAgentSuffix'];
    }

    /**
     * Sets userAgentSuffix
     *
     * @param string $userAgentSuffix Custom fragment to append to User-Agent header in HTTP requests
     *
     * @return $this
     */
    public function setUserAgentSuffix($userAgentSuffix)
    {
        $this->container['userAgentSuffix'] = $userAgentSuffix;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout Seconds to wait for activity before stopping and retrying the connection
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {

        if (!is_null($timeout) && ($timeout > 3600)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling HttpClientConnectionAttributes., must be smaller than or equal to 3600.');
        }
        if (!is_null($timeout) && ($timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling HttpClientConnectionAttributes., must be bigger than or equal to 1.');
        }

        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets enableCircularRedirects
     *
     * @return bool
     */
    public function getEnableCircularRedirects()
    {
        return $this->container['enableCircularRedirects'];
    }

    /**
     * Sets enableCircularRedirects
     *
     * @param bool $enableCircularRedirects Whether to enable redirects to the same location (may be required by some servers)
     *
     * @return $this
     */
    public function setEnableCircularRedirects($enableCircularRedirects)
    {
        $this->container['enableCircularRedirects'] = $enableCircularRedirects;

        return $this;
    }

    /**
     * Gets enableCookies
     *
     * @return bool
     */
    public function getEnableCookies()
    {
        return $this->container['enableCookies'];
    }

    /**
     * Sets enableCookies
     *
     * @param bool $enableCookies Whether to allow cookies to be stored and used
     *
     * @return $this
     */
    public function setEnableCookies($enableCookies)
    {
        $this->container['enableCookies'] = $enableCookies;

        return $this;
    }

    /**
     * Gets useTrustStore
     *
     * @return bool
     */
    public function getUseTrustStore()
    {
        return $this->container['useTrustStore'];
    }

    /**
     * Sets useTrustStore
     *
     * @param bool $useTrustStore Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
     *
     * @return $this
     */
    public function setUseTrustStore($useTrustStore)
    {
        $this->container['useTrustStore'] = $useTrustStore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


