<?php
/**
 * SupportZipGeneratorRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Model;

use \ArrayAccess;
use \Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * SupportZipGeneratorRequest Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupportZipGeneratorRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupportZipGeneratorRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'systemInformation' => 'bool',
        'threadDump' => 'bool',
        'metrics' => 'bool',
        'configuration' => 'bool',
        'security' => 'bool',
        'log' => 'bool',
        'taskLog' => 'bool',
        'auditLog' => 'bool',
        'jmx' => 'bool',
        'replication' => 'bool',
        'limitFileSizes' => 'bool',
        'limitZipSize' => 'bool',
        'hostname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'systemInformation' => null,
        'threadDump' => null,
        'metrics' => null,
        'configuration' => null,
        'security' => null,
        'log' => null,
        'taskLog' => null,
        'auditLog' => null,
        'jmx' => null,
        'replication' => null,
        'limitFileSizes' => null,
        'limitZipSize' => null,
        'hostname' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'systemInformation' => 'systemInformation',
        'threadDump' => 'threadDump',
        'metrics' => 'metrics',
        'configuration' => 'configuration',
        'security' => 'security',
        'log' => 'log',
        'taskLog' => 'taskLog',
        'auditLog' => 'auditLog',
        'jmx' => 'jmx',
        'replication' => 'replication',
        'limitFileSizes' => 'limitFileSizes',
        'limitZipSize' => 'limitZipSize',
        'hostname' => 'hostname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'systemInformation' => 'setSystemInformation',
        'threadDump' => 'setThreadDump',
        'metrics' => 'setMetrics',
        'configuration' => 'setConfiguration',
        'security' => 'setSecurity',
        'log' => 'setLog',
        'taskLog' => 'setTaskLog',
        'auditLog' => 'setAuditLog',
        'jmx' => 'setJmx',
        'replication' => 'setReplication',
        'limitFileSizes' => 'setLimitFileSizes',
        'limitZipSize' => 'setLimitZipSize',
        'hostname' => 'setHostname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'systemInformation' => 'getSystemInformation',
        'threadDump' => 'getThreadDump',
        'metrics' => 'getMetrics',
        'configuration' => 'getConfiguration',
        'security' => 'getSecurity',
        'log' => 'getLog',
        'taskLog' => 'getTaskLog',
        'auditLog' => 'getAuditLog',
        'jmx' => 'getJmx',
        'replication' => 'getReplication',
        'limitFileSizes' => 'getLimitFileSizes',
        'limitZipSize' => 'getLimitZipSize',
        'hostname' => 'getHostname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['systemInformation'] = isset($data['systemInformation']) ? $data['systemInformation'] : null;
        $this->container['threadDump'] = isset($data['threadDump']) ? $data['threadDump'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['log'] = isset($data['log']) ? $data['log'] : null;
        $this->container['taskLog'] = isset($data['taskLog']) ? $data['taskLog'] : null;
        $this->container['auditLog'] = isset($data['auditLog']) ? $data['auditLog'] : null;
        $this->container['jmx'] = isset($data['jmx']) ? $data['jmx'] : null;
        $this->container['replication'] = isset($data['replication']) ? $data['replication'] : null;
        $this->container['limitFileSizes'] = isset($data['limitFileSizes']) ? $data['limitFileSizes'] : null;
        $this->container['limitZipSize'] = isset($data['limitZipSize']) ? $data['limitZipSize'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets systemInformation
     *
     * @return bool
     */
    public function getSystemInformation()
    {
        return $this->container['systemInformation'];
    }

    /**
     * Sets systemInformation
     *
     * @param bool $systemInformation systemInformation
     *
     * @return $this
     */
    public function setSystemInformation($systemInformation)
    {
        $this->container['systemInformation'] = $systemInformation;

        return $this;
    }

    /**
     * Gets threadDump
     *
     * @return bool
     */
    public function getThreadDump()
    {
        return $this->container['threadDump'];
    }

    /**
     * Sets threadDump
     *
     * @param bool $threadDump threadDump
     *
     * @return $this
     */
    public function setThreadDump($threadDump)
    {
        $this->container['threadDump'] = $threadDump;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return bool
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param bool $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return bool
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param bool $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets security
     *
     * @return bool
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param bool $security security
     *
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets log
     *
     * @return bool
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param bool $log log
     *
     * @return $this
     */
    public function setLog($log)
    {
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets taskLog
     *
     * @return bool
     */
    public function getTaskLog()
    {
        return $this->container['taskLog'];
    }

    /**
     * Sets taskLog
     *
     * @param bool $taskLog taskLog
     *
     * @return $this
     */
    public function setTaskLog($taskLog)
    {
        $this->container['taskLog'] = $taskLog;

        return $this;
    }

    /**
     * Gets auditLog
     *
     * @return bool
     */
    public function getAuditLog()
    {
        return $this->container['auditLog'];
    }

    /**
     * Sets auditLog
     *
     * @param bool $auditLog auditLog
     *
     * @return $this
     */
    public function setAuditLog($auditLog)
    {
        $this->container['auditLog'] = $auditLog;

        return $this;
    }

    /**
     * Gets jmx
     *
     * @return bool
     */
    public function getJmx()
    {
        return $this->container['jmx'];
    }

    /**
     * Sets jmx
     *
     * @param bool $jmx jmx
     *
     * @return $this
     */
    public function setJmx($jmx)
    {
        $this->container['jmx'] = $jmx;

        return $this;
    }

    /**
     * Gets replication
     *
     * @return bool
     */
    public function getReplication()
    {
        return $this->container['replication'];
    }

    /**
     * Sets replication
     *
     * @param bool $replication replication
     *
     * @return $this
     */
    public function setReplication($replication)
    {
        $this->container['replication'] = $replication;

        return $this;
    }

    /**
     * Gets limitFileSizes
     *
     * @return bool
     */
    public function getLimitFileSizes()
    {
        return $this->container['limitFileSizes'];
    }

    /**
     * Sets limitFileSizes
     *
     * @param bool $limitFileSizes limitFileSizes
     *
     * @return $this
     */
    public function setLimitFileSizes($limitFileSizes)
    {
        $this->container['limitFileSizes'] = $limitFileSizes;

        return $this;
    }

    /**
     * Gets limitZipSize
     *
     * @return bool
     */
    public function getLimitZipSize()
    {
        return $this->container['limitZipSize'];
    }

    /**
     * Sets limitZipSize
     *
     * @param bool $limitZipSize limitZipSize
     *
     * @return $this
     */
    public function setLimitZipSize($limitZipSize)
    {
        $this->container['limitZipSize'] = $limitZipSize;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


