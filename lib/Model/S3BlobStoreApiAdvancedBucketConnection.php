<?php
/**
 * S3BlobStoreApiAdvancedBucketConnection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Model;

use \ArrayAccess;
use \Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * S3BlobStoreApiAdvancedBucketConnection Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S3BlobStoreApiAdvancedBucketConnection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'S3BlobStoreApiAdvancedBucketConnection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endpoint' => 'string',
        'signerType' => 'string',
        'forcePathStyle' => 'bool',
        'maxConnectionPoolSize' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endpoint' => null,
        'signerType' => null,
        'forcePathStyle' => null,
        'maxConnectionPoolSize' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoint' => 'endpoint',
        'signerType' => 'signerType',
        'forcePathStyle' => 'forcePathStyle',
        'maxConnectionPoolSize' => 'maxConnectionPoolSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoint' => 'setEndpoint',
        'signerType' => 'setSignerType',
        'forcePathStyle' => 'setForcePathStyle',
        'maxConnectionPoolSize' => 'setMaxConnectionPoolSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoint' => 'getEndpoint',
        'signerType' => 'getSignerType',
        'forcePathStyle' => 'getForcePathStyle',
        'maxConnectionPoolSize' => 'getMaxConnectionPoolSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endpoint'] = isset($data['endpoint']) ? $data['endpoint'] : null;
        $this->container['signerType'] = isset($data['signerType']) ? $data['signerType'] : null;
        $this->container['forcePathStyle'] = isset($data['forcePathStyle']) ? $data['forcePathStyle'] : null;
        $this->container['maxConnectionPoolSize'] = isset($data['maxConnectionPoolSize']) ? $data['maxConnectionPoolSize'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoint
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string $endpoint A custom endpoint URL for third party object stores using the S3 API.
     *
     * @return $this
     */
    public function setEndpoint($endpoint)
    {
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets signerType
     *
     * @return string
     */
    public function getSignerType()
    {
        return $this->container['signerType'];
    }

    /**
     * Sets signerType
     *
     * @param string $signerType An API signature version which may be required for third party object stores using the S3 API.
     *
     * @return $this
     */
    public function setSignerType($signerType)
    {
        $this->container['signerType'] = $signerType;

        return $this;
    }

    /**
     * Gets forcePathStyle
     *
     * @return bool
     */
    public function getForcePathStyle()
    {
        return $this->container['forcePathStyle'];
    }

    /**
     * Sets forcePathStyle
     *
     * @param bool $forcePathStyle Setting this flag will result in path-style access being used for all requests.
     *
     * @return $this
     */
    public function setForcePathStyle($forcePathStyle)
    {
        $this->container['forcePathStyle'] = $forcePathStyle;

        return $this;
    }

    /**
     * Gets maxConnectionPoolSize
     *
     * @return int
     */
    public function getMaxConnectionPoolSize()
    {
        return $this->container['maxConnectionPoolSize'];
    }

    /**
     * Sets maxConnectionPoolSize
     *
     * @param int $maxConnectionPoolSize Setting this value will override the default connection pool size of Nexus of the s3 client for this blobstore.
     *
     * @return $this
     */
    public function setMaxConnectionPoolSize($maxConnectionPoolSize)
    {
        $this->container['maxConnectionPoolSize'] = $maxConnectionPoolSize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


