<?php
/**
 * V1ComponentsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Model;

use \ArrayAccess;
use \Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * V1ComponentsBody Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1ComponentsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1_components_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rAsset' => 'string',
'rAssetPathId' => 'string',
'pypiAsset' => 'string',
'helmAsset' => 'string',
'yumDirectory' => 'string',
'yumAsset' => 'string',
'yumAssetFilename' => 'string',
'dockerAsset' => 'string',
'rubygemsAsset' => 'string',
'nugetAsset' => 'string',
'npmAsset' => 'string',
'rawDirectory' => 'string',
'rawAsset1' => 'string',
'rawAsset1Filename' => 'string',
'rawAsset2' => 'string',
'rawAsset2Filename' => 'string',
'rawAsset3' => 'string',
'rawAsset3Filename' => 'string',
'aptAsset' => 'string',
'maven2GroupId' => 'string',
'maven2ArtifactId' => 'string',
'maven2Version' => 'string',
'maven2GeneratePom' => 'bool',
'maven2Packaging' => 'string',
'maven2Asset1' => 'string',
'maven2Asset1Classifier' => 'string',
'maven2Asset1Extension' => 'string',
'maven2Asset2' => 'string',
'maven2Asset2Classifier' => 'string',
'maven2Asset2Extension' => 'string',
'maven2Asset3' => 'string',
'maven2Asset3Classifier' => 'string',
'maven2Asset3Extension' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rAsset' => 'binary',
'rAssetPathId' => null,
'pypiAsset' => 'binary',
'helmAsset' => 'binary',
'yumDirectory' => null,
'yumAsset' => 'binary',
'yumAssetFilename' => null,
'dockerAsset' => 'binary',
'rubygemsAsset' => 'binary',
'nugetAsset' => 'binary',
'npmAsset' => 'binary',
'rawDirectory' => null,
'rawAsset1' => 'binary',
'rawAsset1Filename' => null,
'rawAsset2' => 'binary',
'rawAsset2Filename' => null,
'rawAsset3' => 'binary',
'rawAsset3Filename' => null,
'aptAsset' => 'binary',
'maven2GroupId' => null,
'maven2ArtifactId' => null,
'maven2Version' => null,
'maven2GeneratePom' => null,
'maven2Packaging' => null,
'maven2Asset1' => 'binary',
'maven2Asset1Classifier' => null,
'maven2Asset1Extension' => null,
'maven2Asset2' => 'binary',
'maven2Asset2Classifier' => null,
'maven2Asset2Extension' => null,
'maven2Asset3' => 'binary',
'maven2Asset3Classifier' => null,
'maven2Asset3Extension' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rAsset' => 'r.asset',
'rAssetPathId' => 'r.asset.pathId',
'pypiAsset' => 'pypi.asset',
'helmAsset' => 'helm.asset',
'yumDirectory' => 'yum.directory',
'yumAsset' => 'yum.asset',
'yumAssetFilename' => 'yum.asset.filename',
'dockerAsset' => 'docker.asset',
'rubygemsAsset' => 'rubygems.asset',
'nugetAsset' => 'nuget.asset',
'npmAsset' => 'npm.asset',
'rawDirectory' => 'raw.directory',
'rawAsset1' => 'raw.asset1',
'rawAsset1Filename' => 'raw.asset1.filename',
'rawAsset2' => 'raw.asset2',
'rawAsset2Filename' => 'raw.asset2.filename',
'rawAsset3' => 'raw.asset3',
'rawAsset3Filename' => 'raw.asset3.filename',
'aptAsset' => 'apt.asset',
'maven2GroupId' => 'maven2.groupId',
'maven2ArtifactId' => 'maven2.artifactId',
'maven2Version' => 'maven2.version',
'maven2GeneratePom' => 'maven2.generate-pom',
'maven2Packaging' => 'maven2.packaging',
'maven2Asset1' => 'maven2.asset1',
'maven2Asset1Classifier' => 'maven2.asset1.classifier',
'maven2Asset1Extension' => 'maven2.asset1.extension',
'maven2Asset2' => 'maven2.asset2',
'maven2Asset2Classifier' => 'maven2.asset2.classifier',
'maven2Asset2Extension' => 'maven2.asset2.extension',
'maven2Asset3' => 'maven2.asset3',
'maven2Asset3Classifier' => 'maven2.asset3.classifier',
'maven2Asset3Extension' => 'maven2.asset3.extension'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rAsset' => 'setRAsset',
'rAssetPathId' => 'setRAssetPathId',
'pypiAsset' => 'setPypiAsset',
'helmAsset' => 'setHelmAsset',
'yumDirectory' => 'setYumDirectory',
'yumAsset' => 'setYumAsset',
'yumAssetFilename' => 'setYumAssetFilename',
'dockerAsset' => 'setDockerAsset',
'rubygemsAsset' => 'setRubygemsAsset',
'nugetAsset' => 'setNugetAsset',
'npmAsset' => 'setNpmAsset',
'rawDirectory' => 'setRawDirectory',
'rawAsset1' => 'setRawAsset1',
'rawAsset1Filename' => 'setRawAsset1Filename',
'rawAsset2' => 'setRawAsset2',
'rawAsset2Filename' => 'setRawAsset2Filename',
'rawAsset3' => 'setRawAsset3',
'rawAsset3Filename' => 'setRawAsset3Filename',
'aptAsset' => 'setAptAsset',
'maven2GroupId' => 'setMaven2GroupId',
'maven2ArtifactId' => 'setMaven2ArtifactId',
'maven2Version' => 'setMaven2Version',
'maven2GeneratePom' => 'setMaven2GeneratePom',
'maven2Packaging' => 'setMaven2Packaging',
'maven2Asset1' => 'setMaven2Asset1',
'maven2Asset1Classifier' => 'setMaven2Asset1Classifier',
'maven2Asset1Extension' => 'setMaven2Asset1Extension',
'maven2Asset2' => 'setMaven2Asset2',
'maven2Asset2Classifier' => 'setMaven2Asset2Classifier',
'maven2Asset2Extension' => 'setMaven2Asset2Extension',
'maven2Asset3' => 'setMaven2Asset3',
'maven2Asset3Classifier' => 'setMaven2Asset3Classifier',
'maven2Asset3Extension' => 'setMaven2Asset3Extension'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rAsset' => 'getRAsset',
'rAssetPathId' => 'getRAssetPathId',
'pypiAsset' => 'getPypiAsset',
'helmAsset' => 'getHelmAsset',
'yumDirectory' => 'getYumDirectory',
'yumAsset' => 'getYumAsset',
'yumAssetFilename' => 'getYumAssetFilename',
'dockerAsset' => 'getDockerAsset',
'rubygemsAsset' => 'getRubygemsAsset',
'nugetAsset' => 'getNugetAsset',
'npmAsset' => 'getNpmAsset',
'rawDirectory' => 'getRawDirectory',
'rawAsset1' => 'getRawAsset1',
'rawAsset1Filename' => 'getRawAsset1Filename',
'rawAsset2' => 'getRawAsset2',
'rawAsset2Filename' => 'getRawAsset2Filename',
'rawAsset3' => 'getRawAsset3',
'rawAsset3Filename' => 'getRawAsset3Filename',
'aptAsset' => 'getAptAsset',
'maven2GroupId' => 'getMaven2GroupId',
'maven2ArtifactId' => 'getMaven2ArtifactId',
'maven2Version' => 'getMaven2Version',
'maven2GeneratePom' => 'getMaven2GeneratePom',
'maven2Packaging' => 'getMaven2Packaging',
'maven2Asset1' => 'getMaven2Asset1',
'maven2Asset1Classifier' => 'getMaven2Asset1Classifier',
'maven2Asset1Extension' => 'getMaven2Asset1Extension',
'maven2Asset2' => 'getMaven2Asset2',
'maven2Asset2Classifier' => 'getMaven2Asset2Classifier',
'maven2Asset2Extension' => 'getMaven2Asset2Extension',
'maven2Asset3' => 'getMaven2Asset3',
'maven2Asset3Classifier' => 'getMaven2Asset3Classifier',
'maven2Asset3Extension' => 'getMaven2Asset3Extension'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rAsset'] = isset($data['rAsset']) ? $data['rAsset'] : null;
        $this->container['rAssetPathId'] = isset($data['rAssetPathId']) ? $data['rAssetPathId'] : null;
        $this->container['pypiAsset'] = isset($data['pypiAsset']) ? $data['pypiAsset'] : null;
        $this->container['helmAsset'] = isset($data['helmAsset']) ? $data['helmAsset'] : null;
        $this->container['yumDirectory'] = isset($data['yumDirectory']) ? $data['yumDirectory'] : null;
        $this->container['yumAsset'] = isset($data['yumAsset']) ? $data['yumAsset'] : null;
        $this->container['yumAssetFilename'] = isset($data['yumAssetFilename']) ? $data['yumAssetFilename'] : null;
        $this->container['dockerAsset'] = isset($data['dockerAsset']) ? $data['dockerAsset'] : null;
        $this->container['rubygemsAsset'] = isset($data['rubygemsAsset']) ? $data['rubygemsAsset'] : null;
        $this->container['nugetAsset'] = isset($data['nugetAsset']) ? $data['nugetAsset'] : null;
        $this->container['npmAsset'] = isset($data['npmAsset']) ? $data['npmAsset'] : null;
        $this->container['rawDirectory'] = isset($data['rawDirectory']) ? $data['rawDirectory'] : null;
        $this->container['rawAsset1'] = isset($data['rawAsset1']) ? $data['rawAsset1'] : null;
        $this->container['rawAsset1Filename'] = isset($data['rawAsset1Filename']) ? $data['rawAsset1Filename'] : null;
        $this->container['rawAsset2'] = isset($data['rawAsset2']) ? $data['rawAsset2'] : null;
        $this->container['rawAsset2Filename'] = isset($data['rawAsset2Filename']) ? $data['rawAsset2Filename'] : null;
        $this->container['rawAsset3'] = isset($data['rawAsset3']) ? $data['rawAsset3'] : null;
        $this->container['rawAsset3Filename'] = isset($data['rawAsset3Filename']) ? $data['rawAsset3Filename'] : null;
        $this->container['aptAsset'] = isset($data['aptAsset']) ? $data['aptAsset'] : null;
        $this->container['maven2GroupId'] = isset($data['maven2GroupId']) ? $data['maven2GroupId'] : null;
        $this->container['maven2ArtifactId'] = isset($data['maven2ArtifactId']) ? $data['maven2ArtifactId'] : null;
        $this->container['maven2Version'] = isset($data['maven2Version']) ? $data['maven2Version'] : null;
        $this->container['maven2GeneratePom'] = isset($data['maven2GeneratePom']) ? $data['maven2GeneratePom'] : null;
        $this->container['maven2Packaging'] = isset($data['maven2Packaging']) ? $data['maven2Packaging'] : null;
        $this->container['maven2Asset1'] = isset($data['maven2Asset1']) ? $data['maven2Asset1'] : null;
        $this->container['maven2Asset1Classifier'] = isset($data['maven2Asset1Classifier']) ? $data['maven2Asset1Classifier'] : null;
        $this->container['maven2Asset1Extension'] = isset($data['maven2Asset1Extension']) ? $data['maven2Asset1Extension'] : null;
        $this->container['maven2Asset2'] = isset($data['maven2Asset2']) ? $data['maven2Asset2'] : null;
        $this->container['maven2Asset2Classifier'] = isset($data['maven2Asset2Classifier']) ? $data['maven2Asset2Classifier'] : null;
        $this->container['maven2Asset2Extension'] = isset($data['maven2Asset2Extension']) ? $data['maven2Asset2Extension'] : null;
        $this->container['maven2Asset3'] = isset($data['maven2Asset3']) ? $data['maven2Asset3'] : null;
        $this->container['maven2Asset3Classifier'] = isset($data['maven2Asset3Classifier']) ? $data['maven2Asset3Classifier'] : null;
        $this->container['maven2Asset3Extension'] = isset($data['maven2Asset3Extension']) ? $data['maven2Asset3Extension'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rAsset
     *
     * @return string
     */
    public function getRAsset()
    {
        return $this->container['rAsset'];
    }

    /**
     * Sets rAsset
     *
     * @param string $rAsset r Asset
     *
     * @return $this
     */
    public function setRAsset($rAsset)
    {
        $this->container['rAsset'] = $rAsset;

        return $this;
    }

    /**
     * Gets rAssetPathId
     *
     * @return string
     */
    public function getRAssetPathId()
    {
        return $this->container['rAssetPathId'];
    }

    /**
     * Sets rAssetPathId
     *
     * @param string $rAssetPathId r Asset  Package Path
     *
     * @return $this
     */
    public function setRAssetPathId($rAssetPathId)
    {
        $this->container['rAssetPathId'] = $rAssetPathId;

        return $this;
    }

    /**
     * Gets pypiAsset
     *
     * @return string
     */
    public function getPypiAsset()
    {
        return $this->container['pypiAsset'];
    }

    /**
     * Sets pypiAsset
     *
     * @param string $pypiAsset pypi Asset
     *
     * @return $this
     */
    public function setPypiAsset($pypiAsset)
    {
        $this->container['pypiAsset'] = $pypiAsset;

        return $this;
    }

    /**
     * Gets helmAsset
     *
     * @return string
     */
    public function getHelmAsset()
    {
        return $this->container['helmAsset'];
    }

    /**
     * Sets helmAsset
     *
     * @param string $helmAsset helm Asset
     *
     * @return $this
     */
    public function setHelmAsset($helmAsset)
    {
        $this->container['helmAsset'] = $helmAsset;

        return $this;
    }

    /**
     * Gets yumDirectory
     *
     * @return string
     */
    public function getYumDirectory()
    {
        return $this->container['yumDirectory'];
    }

    /**
     * Sets yumDirectory
     *
     * @param string $yumDirectory yum Directory
     *
     * @return $this
     */
    public function setYumDirectory($yumDirectory)
    {
        $this->container['yumDirectory'] = $yumDirectory;

        return $this;
    }

    /**
     * Gets yumAsset
     *
     * @return string
     */
    public function getYumAsset()
    {
        return $this->container['yumAsset'];
    }

    /**
     * Sets yumAsset
     *
     * @param string $yumAsset yum Asset
     *
     * @return $this
     */
    public function setYumAsset($yumAsset)
    {
        $this->container['yumAsset'] = $yumAsset;

        return $this;
    }

    /**
     * Gets yumAssetFilename
     *
     * @return string
     */
    public function getYumAssetFilename()
    {
        return $this->container['yumAssetFilename'];
    }

    /**
     * Sets yumAssetFilename
     *
     * @param string $yumAssetFilename yum Asset  Filename
     *
     * @return $this
     */
    public function setYumAssetFilename($yumAssetFilename)
    {
        $this->container['yumAssetFilename'] = $yumAssetFilename;

        return $this;
    }

    /**
     * Gets dockerAsset
     *
     * @return string
     */
    public function getDockerAsset()
    {
        return $this->container['dockerAsset'];
    }

    /**
     * Sets dockerAsset
     *
     * @param string $dockerAsset docker Asset
     *
     * @return $this
     */
    public function setDockerAsset($dockerAsset)
    {
        $this->container['dockerAsset'] = $dockerAsset;

        return $this;
    }

    /**
     * Gets rubygemsAsset
     *
     * @return string
     */
    public function getRubygemsAsset()
    {
        return $this->container['rubygemsAsset'];
    }

    /**
     * Sets rubygemsAsset
     *
     * @param string $rubygemsAsset rubygems Asset
     *
     * @return $this
     */
    public function setRubygemsAsset($rubygemsAsset)
    {
        $this->container['rubygemsAsset'] = $rubygemsAsset;

        return $this;
    }

    /**
     * Gets nugetAsset
     *
     * @return string
     */
    public function getNugetAsset()
    {
        return $this->container['nugetAsset'];
    }

    /**
     * Sets nugetAsset
     *
     * @param string $nugetAsset nuget Asset
     *
     * @return $this
     */
    public function setNugetAsset($nugetAsset)
    {
        $this->container['nugetAsset'] = $nugetAsset;

        return $this;
    }

    /**
     * Gets npmAsset
     *
     * @return string
     */
    public function getNpmAsset()
    {
        return $this->container['npmAsset'];
    }

    /**
     * Sets npmAsset
     *
     * @param string $npmAsset npm Asset
     *
     * @return $this
     */
    public function setNpmAsset($npmAsset)
    {
        $this->container['npmAsset'] = $npmAsset;

        return $this;
    }

    /**
     * Gets rawDirectory
     *
     * @return string
     */
    public function getRawDirectory()
    {
        return $this->container['rawDirectory'];
    }

    /**
     * Sets rawDirectory
     *
     * @param string $rawDirectory raw Directory
     *
     * @return $this
     */
    public function setRawDirectory($rawDirectory)
    {
        $this->container['rawDirectory'] = $rawDirectory;

        return $this;
    }

    /**
     * Gets rawAsset1
     *
     * @return string
     */
    public function getRawAsset1()
    {
        return $this->container['rawAsset1'];
    }

    /**
     * Sets rawAsset1
     *
     * @param string $rawAsset1 raw Asset 1
     *
     * @return $this
     */
    public function setRawAsset1($rawAsset1)
    {
        $this->container['rawAsset1'] = $rawAsset1;

        return $this;
    }

    /**
     * Gets rawAsset1Filename
     *
     * @return string
     */
    public function getRawAsset1Filename()
    {
        return $this->container['rawAsset1Filename'];
    }

    /**
     * Sets rawAsset1Filename
     *
     * @param string $rawAsset1Filename raw Asset 1 Filename
     *
     * @return $this
     */
    public function setRawAsset1Filename($rawAsset1Filename)
    {
        $this->container['rawAsset1Filename'] = $rawAsset1Filename;

        return $this;
    }

    /**
     * Gets rawAsset2
     *
     * @return string
     */
    public function getRawAsset2()
    {
        return $this->container['rawAsset2'];
    }

    /**
     * Sets rawAsset2
     *
     * @param string $rawAsset2 raw Asset 2
     *
     * @return $this
     */
    public function setRawAsset2($rawAsset2)
    {
        $this->container['rawAsset2'] = $rawAsset2;

        return $this;
    }

    /**
     * Gets rawAsset2Filename
     *
     * @return string
     */
    public function getRawAsset2Filename()
    {
        return $this->container['rawAsset2Filename'];
    }

    /**
     * Sets rawAsset2Filename
     *
     * @param string $rawAsset2Filename raw Asset 2 Filename
     *
     * @return $this
     */
    public function setRawAsset2Filename($rawAsset2Filename)
    {
        $this->container['rawAsset2Filename'] = $rawAsset2Filename;

        return $this;
    }

    /**
     * Gets rawAsset3
     *
     * @return string
     */
    public function getRawAsset3()
    {
        return $this->container['rawAsset3'];
    }

    /**
     * Sets rawAsset3
     *
     * @param string $rawAsset3 raw Asset 3
     *
     * @return $this
     */
    public function setRawAsset3($rawAsset3)
    {
        $this->container['rawAsset3'] = $rawAsset3;

        return $this;
    }

    /**
     * Gets rawAsset3Filename
     *
     * @return string
     */
    public function getRawAsset3Filename()
    {
        return $this->container['rawAsset3Filename'];
    }

    /**
     * Sets rawAsset3Filename
     *
     * @param string $rawAsset3Filename raw Asset 3 Filename
     *
     * @return $this
     */
    public function setRawAsset3Filename($rawAsset3Filename)
    {
        $this->container['rawAsset3Filename'] = $rawAsset3Filename;

        return $this;
    }

    /**
     * Gets aptAsset
     *
     * @return string
     */
    public function getAptAsset()
    {
        return $this->container['aptAsset'];
    }

    /**
     * Sets aptAsset
     *
     * @param string $aptAsset apt Asset
     *
     * @return $this
     */
    public function setAptAsset($aptAsset)
    {
        $this->container['aptAsset'] = $aptAsset;

        return $this;
    }

    /**
     * Gets maven2GroupId
     *
     * @return string
     */
    public function getMaven2GroupId()
    {
        return $this->container['maven2GroupId'];
    }

    /**
     * Sets maven2GroupId
     *
     * @param string $maven2GroupId maven2 Group ID
     *
     * @return $this
     */
    public function setMaven2GroupId($maven2GroupId)
    {
        $this->container['maven2GroupId'] = $maven2GroupId;

        return $this;
    }

    /**
     * Gets maven2ArtifactId
     *
     * @return string
     */
    public function getMaven2ArtifactId()
    {
        return $this->container['maven2ArtifactId'];
    }

    /**
     * Sets maven2ArtifactId
     *
     * @param string $maven2ArtifactId maven2 Artifact ID
     *
     * @return $this
     */
    public function setMaven2ArtifactId($maven2ArtifactId)
    {
        $this->container['maven2ArtifactId'] = $maven2ArtifactId;

        return $this;
    }

    /**
     * Gets maven2Version
     *
     * @return string
     */
    public function getMaven2Version()
    {
        return $this->container['maven2Version'];
    }

    /**
     * Sets maven2Version
     *
     * @param string $maven2Version maven2 Version
     *
     * @return $this
     */
    public function setMaven2Version($maven2Version)
    {
        $this->container['maven2Version'] = $maven2Version;

        return $this;
    }

    /**
     * Gets maven2GeneratePom
     *
     * @return bool
     */
    public function getMaven2GeneratePom()
    {
        return $this->container['maven2GeneratePom'];
    }

    /**
     * Sets maven2GeneratePom
     *
     * @param bool $maven2GeneratePom maven2 Generate a POM file with these coordinates
     *
     * @return $this
     */
    public function setMaven2GeneratePom($maven2GeneratePom)
    {
        $this->container['maven2GeneratePom'] = $maven2GeneratePom;

        return $this;
    }

    /**
     * Gets maven2Packaging
     *
     * @return string
     */
    public function getMaven2Packaging()
    {
        return $this->container['maven2Packaging'];
    }

    /**
     * Sets maven2Packaging
     *
     * @param string $maven2Packaging maven2 Packaging
     *
     * @return $this
     */
    public function setMaven2Packaging($maven2Packaging)
    {
        $this->container['maven2Packaging'] = $maven2Packaging;

        return $this;
    }

    /**
     * Gets maven2Asset1
     *
     * @return string
     */
    public function getMaven2Asset1()
    {
        return $this->container['maven2Asset1'];
    }

    /**
     * Sets maven2Asset1
     *
     * @param string $maven2Asset1 maven2 Asset 1
     *
     * @return $this
     */
    public function setMaven2Asset1($maven2Asset1)
    {
        $this->container['maven2Asset1'] = $maven2Asset1;

        return $this;
    }

    /**
     * Gets maven2Asset1Classifier
     *
     * @return string
     */
    public function getMaven2Asset1Classifier()
    {
        return $this->container['maven2Asset1Classifier'];
    }

    /**
     * Sets maven2Asset1Classifier
     *
     * @param string $maven2Asset1Classifier maven2 Asset 1 Classifier
     *
     * @return $this
     */
    public function setMaven2Asset1Classifier($maven2Asset1Classifier)
    {
        $this->container['maven2Asset1Classifier'] = $maven2Asset1Classifier;

        return $this;
    }

    /**
     * Gets maven2Asset1Extension
     *
     * @return string
     */
    public function getMaven2Asset1Extension()
    {
        return $this->container['maven2Asset1Extension'];
    }

    /**
     * Sets maven2Asset1Extension
     *
     * @param string $maven2Asset1Extension maven2 Asset 1 Extension
     *
     * @return $this
     */
    public function setMaven2Asset1Extension($maven2Asset1Extension)
    {
        $this->container['maven2Asset1Extension'] = $maven2Asset1Extension;

        return $this;
    }

    /**
     * Gets maven2Asset2
     *
     * @return string
     */
    public function getMaven2Asset2()
    {
        return $this->container['maven2Asset2'];
    }

    /**
     * Sets maven2Asset2
     *
     * @param string $maven2Asset2 maven2 Asset 2
     *
     * @return $this
     */
    public function setMaven2Asset2($maven2Asset2)
    {
        $this->container['maven2Asset2'] = $maven2Asset2;

        return $this;
    }

    /**
     * Gets maven2Asset2Classifier
     *
     * @return string
     */
    public function getMaven2Asset2Classifier()
    {
        return $this->container['maven2Asset2Classifier'];
    }

    /**
     * Sets maven2Asset2Classifier
     *
     * @param string $maven2Asset2Classifier maven2 Asset 2 Classifier
     *
     * @return $this
     */
    public function setMaven2Asset2Classifier($maven2Asset2Classifier)
    {
        $this->container['maven2Asset2Classifier'] = $maven2Asset2Classifier;

        return $this;
    }

    /**
     * Gets maven2Asset2Extension
     *
     * @return string
     */
    public function getMaven2Asset2Extension()
    {
        return $this->container['maven2Asset2Extension'];
    }

    /**
     * Sets maven2Asset2Extension
     *
     * @param string $maven2Asset2Extension maven2 Asset 2 Extension
     *
     * @return $this
     */
    public function setMaven2Asset2Extension($maven2Asset2Extension)
    {
        $this->container['maven2Asset2Extension'] = $maven2Asset2Extension;

        return $this;
    }

    /**
     * Gets maven2Asset3
     *
     * @return string
     */
    public function getMaven2Asset3()
    {
        return $this->container['maven2Asset3'];
    }

    /**
     * Sets maven2Asset3
     *
     * @param string $maven2Asset3 maven2 Asset 3
     *
     * @return $this
     */
    public function setMaven2Asset3($maven2Asset3)
    {
        $this->container['maven2Asset3'] = $maven2Asset3;

        return $this;
    }

    /**
     * Gets maven2Asset3Classifier
     *
     * @return string
     */
    public function getMaven2Asset3Classifier()
    {
        return $this->container['maven2Asset3Classifier'];
    }

    /**
     * Sets maven2Asset3Classifier
     *
     * @param string $maven2Asset3Classifier maven2 Asset 3 Classifier
     *
     * @return $this
     */
    public function setMaven2Asset3Classifier($maven2Asset3Classifier)
    {
        $this->container['maven2Asset3Classifier'] = $maven2Asset3Classifier;

        return $this;
    }

    /**
     * Gets maven2Asset3Extension
     *
     * @return string
     */
    public function getMaven2Asset3Extension()
    {
        return $this->container['maven2Asset3Extension'];
    }

    /**
     * Sets maven2Asset3Extension
     *
     * @param string $maven2Asset3Extension maven2 Asset 3 Extension
     *
     * @return $this
     */
    public function setMaven2Asset3Extension($maven2Asset3Extension)
    {
        $this->container['maven2Asset3Extension'] = $maven2Asset3Extension;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
