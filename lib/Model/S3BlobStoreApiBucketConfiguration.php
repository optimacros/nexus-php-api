<?php
/**
 * S3BlobStoreApiBucketConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Model;

use \ArrayAccess;
use \Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * S3BlobStoreApiBucketConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S3BlobStoreApiBucketConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'S3BlobStoreApiBucketConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bucket' => '\Optimacros\NexusPhpApi\Model\S3BlobStoreApiBucket',
        'encryption' => '\Optimacros\NexusPhpApi\Model\S3BlobStoreApiEncryption',
        'bucketSecurity' => '\Optimacros\NexusPhpApi\Model\S3BlobStoreApiBucketSecurity',
        'advancedBucketConnection' => '\Optimacros\NexusPhpApi\Model\S3BlobStoreApiAdvancedBucketConnection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bucket' => null,
        'encryption' => null,
        'bucketSecurity' => null,
        'advancedBucketConnection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bucket' => 'bucket',
        'encryption' => 'encryption',
        'bucketSecurity' => 'bucketSecurity',
        'advancedBucketConnection' => 'advancedBucketConnection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bucket' => 'setBucket',
        'encryption' => 'setEncryption',
        'bucketSecurity' => 'setBucketSecurity',
        'advancedBucketConnection' => 'setAdvancedBucketConnection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bucket' => 'getBucket',
        'encryption' => 'getEncryption',
        'bucketSecurity' => 'getBucketSecurity',
        'advancedBucketConnection' => 'getAdvancedBucketConnection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bucket'] = isset($data['bucket']) ? $data['bucket'] : null;
        $this->container['encryption'] = isset($data['encryption']) ? $data['encryption'] : null;
        $this->container['bucketSecurity'] = isset($data['bucketSecurity']) ? $data['bucketSecurity'] : null;
        $this->container['advancedBucketConnection'] = isset($data['advancedBucketConnection']) ? $data['advancedBucketConnection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bucket'] === null) {
            $invalidProperties[] = "'bucket' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bucket
     *
     * @return \Optimacros\NexusPhpApi\Model\S3BlobStoreApiBucket
     */
    public function getBucket()
    {
        return $this->container['bucket'];
    }

    /**
     * Sets bucket
     *
     * @param \Optimacros\NexusPhpApi\Model\S3BlobStoreApiBucket $bucket Details of the S3 bucket such as name and region
     *
     * @return $this
     */
    public function setBucket($bucket)
    {
        $this->container['bucket'] = $bucket;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return \Optimacros\NexusPhpApi\Model\S3BlobStoreApiEncryption
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param \Optimacros\NexusPhpApi\Model\S3BlobStoreApiEncryption $encryption The type of encryption to use if any
     *
     * @return $this
     */
    public function setEncryption($encryption)
    {
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets bucketSecurity
     *
     * @return \Optimacros\NexusPhpApi\Model\S3BlobStoreApiBucketSecurity
     */
    public function getBucketSecurity()
    {
        return $this->container['bucketSecurity'];
    }

    /**
     * Sets bucketSecurity
     *
     * @param \Optimacros\NexusPhpApi\Model\S3BlobStoreApiBucketSecurity $bucketSecurity Security details for granting access the S3 API
     *
     * @return $this
     */
    public function setBucketSecurity($bucketSecurity)
    {
        $this->container['bucketSecurity'] = $bucketSecurity;

        return $this;
    }

    /**
     * Gets advancedBucketConnection
     *
     * @return \Optimacros\NexusPhpApi\Model\S3BlobStoreApiAdvancedBucketConnection
     */
    public function getAdvancedBucketConnection()
    {
        return $this->container['advancedBucketConnection'];
    }

    /**
     * Sets advancedBucketConnection
     *
     * @param \Optimacros\NexusPhpApi\Model\S3BlobStoreApiAdvancedBucketConnection $advancedBucketConnection A custom endpoint URL, signer type and whether path style access is enabled
     *
     * @return $this
     */
    public function setAdvancedBucketConnection($advancedBucketConnection)
    {
        $this->container['advancedBucketConnection'] = $advancedBucketConnection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


