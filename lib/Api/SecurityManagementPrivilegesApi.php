<?php
/**
 * SecurityManagementPrivilegesApi
 * PHP version 5
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.43.0-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optimacros\NexusPhpApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Optimacros\NexusPhpApi\ApiException;
use Optimacros\NexusPhpApi\Configuration;
use Optimacros\NexusPhpApi\HeaderSelector;
use Optimacros\NexusPhpApi\ObjectSerializer;

/**
 * SecurityManagementPrivilegesApi Class Doc Comment
 *
 * @category Class
 * @package  Optimacros\NexusPhpApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SecurityManagementPrivilegesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPrivilege
     *
     * Create a wildcard type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPrivilege($body = null)
    {
        $this->createPrivilegeWithHttpInfo($body);
    }

    /**
     * Operation createPrivilegeWithHttpInfo
     *
     * Create a wildcard type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivilegeWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilegeRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPrivilegeAsync
     *
     * Create a wildcard type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilegeAsync($body = null)
    {
        return $this->createPrivilegeAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPrivilegeAsyncWithHttpInfo
     *
     * Create a wildcard type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilegeAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilegeRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPrivilege'
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPrivilegeRequest($body = null)
    {

        $resourcePath = '/v1/security/privileges/wildcard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPrivilege1
     *
     * Create an application type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPrivilege1($body = null)
    {
        $this->createPrivilege1WithHttpInfo($body);
    }

    /**
     * Operation createPrivilege1WithHttpInfo
     *
     * Create an application type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivilege1WithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege1Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPrivilege1Async
     *
     * Create an application type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege1Async($body = null)
    {
        return $this->createPrivilege1AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPrivilege1AsyncWithHttpInfo
     *
     * Create an application type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege1AsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege1Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPrivilege1'
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPrivilege1Request($body = null)
    {

        $resourcePath = '/v1/security/privileges/application';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPrivilege2
     *
     * Create a repository content selector type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPrivilege2($body = null)
    {
        $this->createPrivilege2WithHttpInfo($body);
    }

    /**
     * Operation createPrivilege2WithHttpInfo
     *
     * Create a repository content selector type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivilege2WithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege2Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPrivilege2Async
     *
     * Create a repository content selector type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege2Async($body = null)
    {
        return $this->createPrivilege2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPrivilege2AsyncWithHttpInfo
     *
     * Create a repository content selector type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege2AsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege2Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPrivilege2'
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPrivilege2Request($body = null)
    {

        $resourcePath = '/v1/security/privileges/repository-content-selector';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPrivilege3
     *
     * Create a repository view type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPrivilege3($body = null)
    {
        $this->createPrivilege3WithHttpInfo($body);
    }

    /**
     * Operation createPrivilege3WithHttpInfo
     *
     * Create a repository view type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivilege3WithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege3Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPrivilege3Async
     *
     * Create a repository view type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege3Async($body = null)
    {
        return $this->createPrivilege3AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPrivilege3AsyncWithHttpInfo
     *
     * Create a repository view type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege3AsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege3Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPrivilege3'
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPrivilege3Request($body = null)
    {

        $resourcePath = '/v1/security/privileges/repository-view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPrivilege4
     *
     * Create a repository admin type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPrivilege4($body = null)
    {
        $this->createPrivilege4WithHttpInfo($body);
    }

    /**
     * Operation createPrivilege4WithHttpInfo
     *
     * Create a repository admin type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivilege4WithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege4Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPrivilege4Async
     *
     * Create a repository admin type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege4Async($body = null)
    {
        return $this->createPrivilege4AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPrivilege4AsyncWithHttpInfo
     *
     * Create a repository admin type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege4AsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege4Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPrivilege4'
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPrivilege4Request($body = null)
    {

        $resourcePath = '/v1/security/privileges/repository-admin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPrivilege5
     *
     * Create a script type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPrivilege5($body = null)
    {
        $this->createPrivilege5WithHttpInfo($body);
    }

    /**
     * Operation createPrivilege5WithHttpInfo
     *
     * Create a script type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to create. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivilege5WithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege5Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPrivilege5Async
     *
     * Create a script type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege5Async($body = null)
    {
        return $this->createPrivilege5AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPrivilege5AsyncWithHttpInfo
     *
     * Create a script type privilege.
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPrivilege5AsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createPrivilege5Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPrivilege5'
     *
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPrivilege5Request($body = null)
    {

        $resourcePath = '/v1/security/privileges/script';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePrivilege
     *
     * Delete a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to delete. (required)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePrivilege($privilegeName)
    {
        $this->deletePrivilegeWithHttpInfo($privilegeName);
    }

    /**
     * Operation deletePrivilegeWithHttpInfo
     *
     * Delete a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to delete. (required)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePrivilegeWithHttpInfo($privilegeName)
    {
        $returnType = '';
        $request = $this->deletePrivilegeRequest($privilegeName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePrivilegeAsync
     *
     * Delete a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePrivilegeAsync($privilegeName)
    {
        return $this->deletePrivilegeAsyncWithHttpInfo($privilegeName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePrivilegeAsyncWithHttpInfo
     *
     * Delete a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePrivilegeAsyncWithHttpInfo($privilegeName)
    {
        $returnType = '';
        $request = $this->deletePrivilegeRequest($privilegeName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePrivilege'
     *
     * @param  string $privilegeName The name of the privilege to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePrivilegeRequest($privilegeName)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling deletePrivilege'
            );
        }

        $resourcePath = '/v1/security/privileges/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPrivilege
     *
     * Retrieve a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to retrieve. (required)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optimacros\NexusPhpApi\Model\ApiPrivilege
     */
    public function getPrivilege($privilegeName)
    {
        list($response) = $this->getPrivilegeWithHttpInfo($privilegeName);
        return $response;
    }

    /**
     * Operation getPrivilegeWithHttpInfo
     *
     * Retrieve a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to retrieve. (required)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optimacros\NexusPhpApi\Model\ApiPrivilege, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivilegeWithHttpInfo($privilegeName)
    {
        $returnType = '\Optimacros\NexusPhpApi\Model\ApiPrivilege';
        $request = $this->getPrivilegeRequest($privilegeName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optimacros\NexusPhpApi\Model\ApiPrivilege',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPrivilegeAsync
     *
     * Retrieve a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrivilegeAsync($privilegeName)
    {
        return $this->getPrivilegeAsyncWithHttpInfo($privilegeName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPrivilegeAsyncWithHttpInfo
     *
     * Retrieve a privilege by name.
     *
     * @param  string $privilegeName The name of the privilege to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrivilegeAsyncWithHttpInfo($privilegeName)
    {
        $returnType = '\Optimacros\NexusPhpApi\Model\ApiPrivilege';
        $request = $this->getPrivilegeRequest($privilegeName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPrivilege'
     *
     * @param  string $privilegeName The name of the privilege to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPrivilegeRequest($privilegeName)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling getPrivilege'
            );
        }

        $resourcePath = '/v1/security/privileges/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPrivileges
     *
     * Retrieve a list of privileges.
     *
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optimacros\NexusPhpApi\Model\ApiPrivilege[]
     */
    public function getPrivileges()
    {
        list($response) = $this->getPrivilegesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPrivilegesWithHttpInfo
     *
     * Retrieve a list of privileges.
     *
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optimacros\NexusPhpApi\Model\ApiPrivilege[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivilegesWithHttpInfo()
    {
        $returnType = '\Optimacros\NexusPhpApi\Model\ApiPrivilege[]';
        $request = $this->getPrivilegesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optimacros\NexusPhpApi\Model\ApiPrivilege[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPrivilegesAsync
     *
     * Retrieve a list of privileges.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrivilegesAsync()
    {
        return $this->getPrivilegesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPrivilegesAsyncWithHttpInfo
     *
     * Retrieve a list of privileges.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrivilegesAsyncWithHttpInfo()
    {
        $returnType = '\Optimacros\NexusPhpApi\Model\ApiPrivilege[]';
        $request = $this->getPrivilegesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPrivileges'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPrivilegesRequest()
    {

        $resourcePath = '/v1/security/privileges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrivilege
     *
     * Update a wildcard type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrivilege($privilegeName, $body = null)
    {
        $this->updatePrivilegeWithHttpInfo($privilegeName, $body);
    }

    /**
     * Operation updatePrivilegeWithHttpInfo
     *
     * Update a wildcard type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivilegeWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilegeRequest($privilegeName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePrivilegeAsync
     *
     * Update a wildcard type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilegeAsync($privilegeName, $body = null)
    {
        return $this->updatePrivilegeAsyncWithHttpInfo($privilegeName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePrivilegeAsyncWithHttpInfo
     *
     * Update a wildcard type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilegeAsyncWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilegeRequest($privilegeName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrivilege'
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeWildcardRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePrivilegeRequest($privilegeName, $body = null)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling updatePrivilege'
            );
        }

        $resourcePath = '/v1/security/privileges/wildcard/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrivilege1
     *
     * Update an application type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrivilege1($privilegeName, $body = null)
    {
        $this->updatePrivilege1WithHttpInfo($privilegeName, $body);
    }

    /**
     * Operation updatePrivilege1WithHttpInfo
     *
     * Update an application type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivilege1WithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege1Request($privilegeName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePrivilege1Async
     *
     * Update an application type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege1Async($privilegeName, $body = null)
    {
        return $this->updatePrivilege1AsyncWithHttpInfo($privilegeName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePrivilege1AsyncWithHttpInfo
     *
     * Update an application type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege1AsyncWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege1Request($privilegeName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrivilege1'
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeApplicationRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePrivilege1Request($privilegeName, $body = null)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling updatePrivilege1'
            );
        }

        $resourcePath = '/v1/security/privileges/application/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrivilege2
     *
     * Update a repository view type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrivilege2($privilegeName, $body = null)
    {
        $this->updatePrivilege2WithHttpInfo($privilegeName, $body);
    }

    /**
     * Operation updatePrivilege2WithHttpInfo
     *
     * Update a repository view type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivilege2WithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege2Request($privilegeName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePrivilege2Async
     *
     * Update a repository view type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege2Async($privilegeName, $body = null)
    {
        return $this->updatePrivilege2AsyncWithHttpInfo($privilegeName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePrivilege2AsyncWithHttpInfo
     *
     * Update a repository view type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege2AsyncWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege2Request($privilegeName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrivilege2'
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryViewRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePrivilege2Request($privilegeName, $body = null)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling updatePrivilege2'
            );
        }

        $resourcePath = '/v1/security/privileges/repository-view/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrivilege3
     *
     * Update a repository admin type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrivilege3($privilegeName, $body = null)
    {
        $this->updatePrivilege3WithHttpInfo($privilegeName, $body);
    }

    /**
     * Operation updatePrivilege3WithHttpInfo
     *
     * Update a repository admin type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivilege3WithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege3Request($privilegeName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePrivilege3Async
     *
     * Update a repository admin type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege3Async($privilegeName, $body = null)
    {
        return $this->updatePrivilege3AsyncWithHttpInfo($privilegeName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePrivilege3AsyncWithHttpInfo
     *
     * Update a repository admin type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege3AsyncWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege3Request($privilegeName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrivilege3'
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryAdminRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePrivilege3Request($privilegeName, $body = null)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling updatePrivilege3'
            );
        }

        $resourcePath = '/v1/security/privileges/repository-admin/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrivilege4
     *
     * Update a repository content selector type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrivilege4($privilegeName, $body = null)
    {
        $this->updatePrivilege4WithHttpInfo($privilegeName, $body);
    }

    /**
     * Operation updatePrivilege4WithHttpInfo
     *
     * Update a repository content selector type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivilege4WithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege4Request($privilegeName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePrivilege4Async
     *
     * Update a repository content selector type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege4Async($privilegeName, $body = null)
    {
        return $this->updatePrivilege4AsyncWithHttpInfo($privilegeName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePrivilege4AsyncWithHttpInfo
     *
     * Update a repository content selector type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege4AsyncWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege4Request($privilegeName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrivilege4'
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeRepositoryContentSelectorRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePrivilege4Request($privilegeName, $body = null)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling updatePrivilege4'
            );
        }

        $resourcePath = '/v1/security/privileges/repository-content-selector/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrivilege5
     *
     * Update a script type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrivilege5($privilegeName, $body = null)
    {
        $this->updatePrivilege5WithHttpInfo($privilegeName, $body);
    }

    /**
     * Operation updatePrivilege5WithHttpInfo
     *
     * Update a script type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to update. (optional)
     *
     * @throws \Optimacros\NexusPhpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivilege5WithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege5Request($privilegeName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePrivilege5Async
     *
     * Update a script type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege5Async($privilegeName, $body = null)
    {
        return $this->updatePrivilege5AsyncWithHttpInfo($privilegeName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePrivilege5AsyncWithHttpInfo
     *
     * Update a script type privilege.
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePrivilege5AsyncWithHttpInfo($privilegeName, $body = null)
    {
        $returnType = '';
        $request = $this->updatePrivilege5Request($privilegeName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrivilege5'
     *
     * @param  string $privilegeName The name of the privilege to update. (required)
     * @param  \Optimacros\NexusPhpApi\Model\ApiPrivilegeScriptRequest $body The privilege to update. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePrivilege5Request($privilegeName, $body = null)
    {
        // verify the required parameter 'privilegeName' is set
        if ($privilegeName === null || (is_array($privilegeName) && count($privilegeName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilegeName when calling updatePrivilege5'
            );
        }

        $resourcePath = '/v1/security/privileges/script/{privilegeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($privilegeName !== null) {
            $resourcePath = str_replace(
                '{' . 'privilegeName' . '}',
                ObjectSerializer::toPathValue($privilegeName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
